version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_service
    ports:
      - "8080:80" # Mapeia a porta 80 do container para a porta 8080 do host
    networks:
      - app_network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Key=8e9f5c4d29b9d11835f1e59c3a1d9f582a3c1f3e7c5a1f9b2a5c7d3e4e2f1c6f
      - Jwt__Issuer=samuel
      - Jwt__Audience=samuel
      - ConnectionStrings__MotorCyclesConnection=Host=postgres;Port=5432;Database=motorcycles;Username=motorcycles;Password=motorcycles$#@!
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - uploads_data:/app/uploads

  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: motorcycles
      POSTGRES_USER: motorcycles
      POSTGRES_PASSWORD: motorcycles$#@!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U motorcycles -d motorcycles"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

volumes:
  postgres_data:
  uploads_data: # Adicione esta linha para definir o volume para uploads

networks:
  app_network:
    driver: bridge
